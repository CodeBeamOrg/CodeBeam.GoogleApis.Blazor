using GoogleApis.Blazor.Models;
using Microsoft.AspNetCore.Components;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;

namespace GoogleApis.Blazor.Calendar
{
    public class CalendarService
    {
        [Inject] IHttpClientFactory HttpClientFactory { get; set; }

        public CalendarService(IHttpClientFactory httpClientFactory)
        {
            HttpClientFactory = httpClientFactory;
        }

        /// <summary>
        /// Get all calendars that authenticated user has.
        /// </summary>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        public string GetCalendars(string accessToken)
        {
            var client = HttpClientFactory.CreateClient();

            var result = client.GetAsync("https://www.googleapis.com/calendar/v3/users/me/calendarList?access_token=" + accessToken).Result;

            if (!result.IsSuccessStatusCode)
            {
                return "error";
            }

            return result.Content.ReadAsStringAsync().Result;
        }

        /// <summary>
        /// Get calendar with given id that authenticated user has.
        /// </summary>
        /// <param name="accessToken">The access token generated with authorization code. Can be generated by AuthService.AuthorizeCredential</param>
        /// <returns></returns>
        public string GetCalendarById(string accessToken, string calendarId)
        {
            var client = HttpClientFactory.CreateClient();

            var result = client.GetAsync($"https://www.googleapis.com/calendar/v3/users/me/calendarList/{calendarId}?access_token=" + accessToken).Result;

            if (!result.IsSuccessStatusCode)
            {
                return "error";
            }

            return result.Content.ReadAsStringAsync().Result;
        }

        public string GetCalendarBySummary(string accessToken, string summary)
        {
            string calendars = GetCalendars(accessToken);
            if (calendars == "error")
            {
                return "error: Can't fetch calendars.";
            }
            GoogleCalendarRoot jsonCalendar = JsonSerializer.Deserialize<GoogleCalendarRoot>(calendars);

            if (jsonCalendar.items == null)
            {
                return "none";
            }

            string calendarId = "";
            foreach (var item in jsonCalendar.items)
            {
                if (item.summary == summary)
                {
                    calendarId = item.id;
                }
            }

            if (string.IsNullOrEmpty(calendarId))
            {
                return "none";
            }

            return GetCalendarById(accessToken, calendarId);
        }

        public string GetCalendarIdBySummary(string accessToken, string summary)
        {
            string result = GetCalendarBySummary(accessToken, summary);
            GoogleCalendarModel jsonCalendar = JsonSerializer.Deserialize<GoogleCalendarModel>(result);

            if (string.IsNullOrEmpty(jsonCalendar.id))
            {
                return "none";
            }
            return jsonCalendar.id;
        }

        /// <summary>
        /// Add a new secondary calendar into user's CalendarList.
        /// </summary>
        /// <param name="accessToken"></param>
        /// <returns></returns>
        public string AddCalendar(string accessToken, string calendarTitle, string description = "", string timeZone = "")
        {
            GoogleCalendarModel calendar = new()
            {
                summary = calendarTitle,
                description = description,
                timeZone = timeZone,
            };

            string requestBody = JsonSerializer.Serialize(calendar);

            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var content = new StringContent(requestBody, Encoding.UTF8, "application/json");

            var result = client.PostAsync($"https://www.googleapis.com/calendar/v3/calendars", content).Result;

            if (!result.IsSuccessStatusCode)
            {
                return "error";
            }

            return result.Content.ReadAsStringAsync().Result;
        }

        public string UpdateCalendar(string accessToken, string calendarId, string calendarTitle, string description = "", string timeZone = "")
        {
            GoogleCalendarModel calendar = new()
            {
                summary = calendarTitle,
                description = description,
                timeZone = timeZone,
            };

            string requestBody = JsonSerializer.Serialize(calendar);

            var client = HttpClientFactory.CreateClient();
            client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
            var content = new StringContent(requestBody, Encoding.UTF8, "application/json");

            var result = client.PutAsync($"https://www.googleapis.com/calendar/v3/calendars/{calendarId}", content).Result;

            if (!result.IsSuccessStatusCode)
            {
                return "error";
            }

            return result.Content.ReadAsStringAsync().Result;
        }

    }
}
